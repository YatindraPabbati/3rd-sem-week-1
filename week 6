//area of shapes

#include <bits/stdc++.h>
#include<string>
using namespace std;

int area(int);
int area(int,int);
float area(float);
float area(float,float);
 int s,l,b;
        float r,bs,ht;
        cout<<"Enter side of a square:";
        cin>>s;
        cout<<"Enter length and breadth of rectangle:";
        cin>>l>>b;
        cout<<"Enter radius of circle:";
        cin>>r;
        cout<<"Enter base and height of triangle:";
        cin>>bs>>ht;
        cout<<"Area of square is"<<area(s);
        cout<<"\nArea of rectangle is "<<area(l,b);
    cout<<"\nArea of circle is "<<area(r);
    cout<<"\nArea of triangle is "<<area(bs,ht);
}
int area(int s)
{
    return(s*s);
}
int area(int l,int b)
{
    return(l*b);
}
float area(float r)
{
    return(3.14*r*r);
}
float area(float bs,float ht)
{
   return((bs*ht)/2);
}


//palindrome

#include <bits/stdc++.h>
#include<string>
using namespace std;
class func
{
        public:
                void pal(int );
                void pal(char c[]);
};
void func :: pal(int n)
{
        int n1,sum,a;
        n1=n;
        sum=0;

        do
        {
                sum=sum*10;
                a=n%10;
                sum=sum+a;
                n=n/10;
        }while(n>0);
        if(sum==n1)
                cout<<"\n it is Palindrome";
        else
                cout<<"\n it is not a palindrome";

}
void func :: pal(char c[])
{
        int l=strlen(c);
        char b[10];
        int i,j;
        for(i=0,j=l-1;i<l;i++,j--)
        {
                b[i]=c[j];
        }
        b[i]=' ';
        if(strcmp(c,b)==0)
        {cout<<"\nThe entered text is palindrome";
        }
        else
        {cout<<"\n the entered text is not a palindrome";
        }
        
        int main()
{
        char c[10];
        int k,r,v;
        func p;
        do
        {
                cout<<"palindrome"<<endl;
                cout<<"1.for interger"<<endl;
                cout<<"2.for character"<<endl;
                cout<<"\nenter the choice\n"<<endl;
                cin>>r;
                switch(r)
                {
                        case 1:
                                cout<<"Enter the number";
                                cin>>k;
                                p.pal(k);
                                break;

                        case 2:
                                cout<<"\nEnter the string to be checked"<<endl;
                                cin>>c;
                                p.pal(c);
                                break;
                }
                cout<<"\ndo you want to continue? (1/0)"<<endl;
                cin>>v;
        }while(v==1);
        return 0;
}

//comparing strings

#include <bits/stdc++.h>
#include<string>
using namespace std;
 class CompareString {
 
 public:

     char str[25];
 

     CompareString(char str1[])
     {
     
         strcpy(this->str, str1);
     }
 

     int operator==(CompareString s2)
     {
         if (strcmp(str, s2.str) == 0)
             return 1;
         else
             return 0;
     }
 

      int operator<=(CompareString s3)
      {
      if (strlen(str) <= strlen(s3.str))
              return 1;
          else
              return 0;
      }

      int operator>=(CompareString s3)
      {
          if (strlen(str) >= strlen(s3.str))
              return 1;
          else
              return 0;
      }
 };


 void compare(CompareString s1, CompareString s2)
 {
 
     if (s1 == s2)
         cout << s1.str << " is equal to "
              << s2.str << endl;
     else {
         cout << s1.str << " is not equal to "
             << s2.str << endl;
          if (s1 >= s2)
              cout << s1.str << " is greater than " 
          << s2.str << endl;
 else
              cout << s2.str << " is greater than "
                   << s1.str << endl;
     }
 }

 void testcase1()
 {

     char str1[] = "abc";
     char str2[] = "abc";
 
     CompareString s1(str1);
     CompareString s2(str2);
 
     cout << "Comparing \"" << s1.str << "\" and \""          << s2.str << "\"" << endl;
      compare(s1, s2);
 }
 int main(){
 comparestring s;
 s==s1;
 return 0;
 }
 
 
 //Complex operation using binary overloading
 
 #include <bits/stdc++.h>
#include<string>
using namespace std;
 class Complex {
private:
    int real, imag;
public:
    Complex(int r = 0, int i = 0) {real = r;   imag = i;}
     
    Complex operator + (Complex const &obj) {
         Complex res;
         res.real = real + obj.real;
         res.imag = imag + obj.imag;
         return res;
    }
    void print() { cout << real << " + i" << imag << '\n'; }
};
int main(){
    Complex c1(10, 5), c2(2, 4);
    Complex c3 = c1 + c2;
    c3.print();
    return 0;
}

//rational numbers
#include<stdio.h>
 #include<iostream>
 using namespace std;
 class rational
 {
         int numer;
         int denom;
         public:
         void getdata()
         {
                 cout<<"\n enter the numerator part of the rational no. :: ";
                 cin>>numer;
                 cout<<"\n enter the denominator part of the rational no. :: ";
                 cin>>denom;
         }
         void operator+(rational);
         void operator-(rational);
         void operator *(rational);
         void operator /(rational);
 };
 void rational ::operator+(rational c1)
 {
         rational temp;
         temp.numer=(numer*c1.denom)+(c1.numer*denom);
         temp.denom=denom*c1.denom;
         cout<<"\nrational no. after addition :: ";
         cout<<"\n numerator = "<<temp.numer<<"\n denominator = "<<temp.denom;
 }
 void rational ::operator -(rational c1)
 {
         rational temp;
         temp.numer=(numer*c1.denom)-(c1.numer*denom);
         temp.denom=denom*c1.denom;
         cout<<"\n rational no. after subtraction :: ";
         cout<<"\n numerator = " <<temp.numer<<"\n denominator = "<<temp.denom;
 }
 void rational ::operator *(rational c1)
 {
         rational temp;
         temp.numer=numer*c1.numer;
         temp.denom=denom*c1.denom;
         cout<<"\n rational no. after multiplication :: ";
         cout <<"\n numerator = "<<temp.numer<<"\n denominator = "<< temp.denom;
 }
 void rational :: operator /(rational c1)
 {
         rational temp;
         temp.numer= numer*c1.denom;
         temp.denom=c1.numer*denom;
         cout<<"\n rational no. after dividation :: ";
         cout <<"\n numerator = "<<temp.numer<<"\n denominator = "<<temp.denom;
 }
 int main()
 {

         rational c1, c2;
         int n;
         do
         {
                 cout<<"\n\n 1.Input data for rational no. ";
                 cout<<"\n 2. Addition of rational no. ";
                 cout<<"\n 3. Subtraction of rational no. ";
                 cout<<"\n 4. Multiplication of rational no.";
                 cout<<"\n 5. Division of rational no. ";
                 cout<<"\n 6. Quit";
                 cout<<"\n\n Enter your choice :: ";
                 cin>>n;
                 switch(n)
                 {
                         case 1:
                         cout<<endl<<"\n enter the data for first rational no.:: ";
                         c1.getdata();
                         cout<<endl<<"\n enter the data for second rational no. :: ";
                         c2.getdata ();
                         break;

                         case 2:
                         c1+c2;
                         break;

                         case 3:
                         c1-c2;
                         break;

                         case 4:
                         c1*c2;
                         break;

                         case 5:
                         c1/c2;
                         break;

                         case 6:
                         exit(1);
                         break;
                 }
         } while (n!=6);
         return 0;
 }

//volume of solids

#include<iostream>
using namespace std;
#define PI 3.1416


float volume(float length, float breadth, float height);
float volume(float radius);
float volume(float radius, float height);

int main(){
float cube_l = 40.0, cube_b = 30.0, cube_h = 10.0;
float sphere_r = 2.5;
float cylinder_r = 2.5, cylinder_h = 10.0;
cout<<"Volume of Cube ="<<volume(cube_l, cube_b, cube_h)<<endl;
cout<<"Volume of Sphere ="<<volume(sphere_r)<<endl;
cout<<"Volume of Cylinder ="<<volume(cylinder_r, cylinder_h)<<endl;
return 0;
}

float volume(float length, float breadth, float height){
return length * breadth * height;
}
float volume(float radius){
return (4.0/3.0) * PI * radius * radius *radius;
}
float volume(float radius, float height){
return PI * radius *radius * height;
}
